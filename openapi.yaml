components:
  schemas:
    Body_login_access_token_api_v1_login_access_token_post:
      properties:
        client_id:
          anyOf:
          - type: string
          - nullable: true
          title: Client Id
        client_secret:
          anyOf:
          - type: string
          - nullable: true
          title: Client Secret
        grant_type:
          anyOf:
          - pattern: password
            type: string
          - nullable: true
          title: Grant Type
        password:
          title: Password
          type: string
        scope:
          default: ''
          title: Scope
          type: string
        username:
          title: Username
          type: string
      required:
      - username
      - password
      title: Body_login_access_token_api_v1_login_access_token_post
      type: object
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          title: Detail
          type: array
      title: HTTPValidationError
      type: object
    PaginatedResponse:
      properties:
        has_next:
          title: Has Next
          type: boolean
        has_prev:
          title: Has Prev
          type: boolean
        items:
          items: {}
          title: Items
          type: array
        page:
          title: Page
          type: integer
        per_page:
          title: Per Page
          type: integer
        total:
          title: Total
          type: integer
      required:
      - items
      - total
      - page
      - per_page
      - has_next
      - has_prev
      title: PaginatedResponse
      type: object
    SubscriberCreate:
      properties:
        custom_fields:
          default: {}
          title: Custom Fields
          type: object
        email:
          format: email
          title: Email
          type: string
        first_name:
          anyOf:
          - type: string
          - nullable: true
          title: First Name
        last_name:
          anyOf:
          - type: string
          - nullable: true
          title: Last Name
        status:
          allOf:
          - $ref: '#/components/schemas/SubscriberStatus'
          default: active
        tags:
          default: []
          items:
            type: string
          title: Tags
          type: array
        user_id:
          format: uuid
          title: User Id
          type: string
      required:
      - email
      - user_id
      title: SubscriberCreate
      type: object
    SubscriberResponse:
      properties:
        created_at:
          format: date-time
          title: Created At
          type: string
        custom_fields:
          default: {}
          title: Custom Fields
          type: object
        email:
          format: email
          title: Email
          type: string
        first_name:
          anyOf:
          - type: string
          - nullable: true
          title: First Name
        id:
          format: uuid
          title: Id
          type: string
        last_name:
          anyOf:
          - type: string
          - nullable: true
          title: Last Name
        source:
          anyOf:
          - type: string
          - nullable: true
          title: Source
        status:
          allOf:
          - $ref: '#/components/schemas/SubscriberStatus'
          default: active
        tags:
          default: []
          items:
            type: string
          title: Tags
          type: array
        updated_at:
          anyOf:
          - format: date-time
            type: string
          - nullable: true
          title: Updated At
        user_id:
          format: uuid
          title: User Id
          type: string
      required:
      - email
      - id
      - user_id
      - created_at
      title: SubscriberResponse
      type: object
    SubscriberStatus:
      enum:
      - active
      - unsubscribed
      - bounced
      title: SubscriberStatus
      type: string
    Token:
      properties:
        access_token:
          title: Access Token
          type: string
        token_type:
          default: bearer
          title: Token Type
          type: string
      required:
      - access_token
      title: Token
      type: object
    UserCreate:
      properties:
        email:
          format: email
          maxLength: 255
          title: Email
          type: string
        full_name:
          anyOf:
          - maxLength: 255
            type: string
          - nullable: true
          title: Full Name
        is_active:
          default: true
          title: Is Active
          type: boolean
        is_superuser:
          default: false
          title: Is Superuser
          type: boolean
        password:
          maxLength: 40
          minLength: 6
          title: Password
          type: string
      required:
      - email
      - password
      title: UserCreate
      type: object
    UserPublic:
      properties:
        email:
          format: email
          maxLength: 255
          title: Email
          type: string
        full_name:
          anyOf:
          - maxLength: 255
            type: string
          - nullable: true
          title: Full Name
        id:
          format: uuid
          title: Id
          type: string
        is_active:
          default: true
          title: Is Active
          type: boolean
        is_superuser:
          default: false
          title: Is Superuser
          type: boolean
      required:
      - email
      - id
      title: UserPublic
      type: object
    UserRegister:
      properties:
        email:
          format: email
          maxLength: 255
          title: Email
          type: string
        full_name:
          anyOf:
          - maxLength: 255
            type: string
          - nullable: true
          title: Full Name
        password:
          maxLength: 40
          minLength: 6
          title: Password
          type: string
      required:
      - email
      - password
      title: UserRegister
      type: object
    UsersPublic:
      properties:
        count:
          title: Count
          type: integer
        data:
          items:
            $ref: '#/components/schemas/UserPublic'
          title: Data
          type: array
      required:
      - data
      - count
      title: UsersPublic
      type: object
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          title: Location
          type: array
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
      required:
      - loc
      - msg
      - type
      title: ValidationError
      type: object
    WebhookCreate:
      properties:
        events:
          items:
            type: string
          title: Events
          type: array
        secret:
          anyOf:
          - type: string
          - nullable: true
          title: Secret
        url:
          title: Url
          type: string
      required:
      - url
      - events
      title: WebhookCreate
      type: object
    WebhookResponse:
      properties:
        created_at:
          format: date-time
          title: Created At
          type: string
        events:
          items:
            type: string
          title: Events
          type: array
        id:
          format: uuid
          title: Id
          type: string
        is_active:
          title: Is Active
          type: boolean
        url:
          title: Url
          type: string
      required:
      - id
      - url
      - events
      - is_active
      - created_at
      title: WebhookResponse
      type: object
    WebhookTestResponse:
      properties:
        message:
          title: Message
          type: string
        success:
          title: Success
          type: boolean
      required:
      - success
      - message
      title: WebhookTestResponse
      type: object
  securitySchemes:
    OAuth2PasswordBearer:
      flows:
        password:
          scopes: {}
          tokenUrl: /api/v1/login/access-token
      type: oauth2
info:
  description: API for managing subscribers, integrations, and webhooks
  title: Whookfirm Subscriber Management API
  version: 1.0.0
openapi: 3.1.0
paths:
  /api/v1/login/access-token:
    post:
      description: Login, get an access token for future requests
      operationId: login_access_token_api_v1_login_access_token_post
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Body_login_access_token_api_v1_login_access_token_post'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Login Access Token
      tags:
      - login
      - login
  /api/v1/login/test-token:
    post:
      description: Test access token
      operationId: test_token_api_v1_login_test_token_post
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'
          description: Successful Response
      security:
      - OAuth2PasswordBearer: []
      summary: Test Token
      tags:
      - login
      - login
  /api/v1/subscribers:
    get:
      description: List subscribers with pagination and filtering
      operationId: list_subscribers_api_v1_subscribers_get
      parameters:
      - in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          title: Page
          type: integer
      - in: query
        name: per_page
        required: false
        schema:
          default: 50
          maximum: 100
          minimum: 1
          title: Per Page
          type: integer
      - in: query
        name: search
        required: false
        schema:
          anyOf:
          - type: string
          - nullable: true
          title: Search
      - in: query
        name: status
        required: false
        schema:
          anyOf:
          - $ref: '#/components/schemas/SubscriberStatus'
          - nullable: true
          title: Status
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: List Subscribers
      tags:
      - subscriber
    post:
      description: Create a new subscriber
      operationId: create_subscriber_api_v1_subscribers_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriberCreate'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriberResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Create Subscriber
      tags:
      - subscriber
  /api/v1/users/:
    get:
      description: Retrieve users.
      operationId: read_users_api_v1_users__get
      parameters:
      - in: query
        name: skip
        required: false
        schema:
          default: 0
          title: Skip
          type: integer
      - in: query
        name: limit
        required: false
        schema:
          default: 100
          title: Limit
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersPublic'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Read Users
      tags:
      - user
    post:
      description: Create new user.
      operationId: create_user_api_v1_users__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Create User
      tags:
      - user
  /api/v1/users/signup:
    post:
      description: Create new user without the need to be logged in.
      operationId: register_user_api_v1_users_signup_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Register User
      tags:
      - user
  /api/v1/users/{user_id}:
    get:
      description: Get a specific user by id.
      operationId: read_user_by_id_api_v1_users__user_id__get
      parameters:
      - in: path
        name: user_id
        required: true
        schema:
          format: uuid
          title: User Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                anyOf:
                - $ref: '#/components/schemas/UserPublic'
                - nullable: true
                title: Response Read User By Id Api V1 Users  User Id  Get
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Read User By Id
      tags:
      - user
  /api/v1/webhooks:
    get:
      description: List user's webhooks
      operationId: list_webhooks_api_v1_webhooks_get
      parameters:
      - in: query
        name: include_inactive
        required: false
        schema:
          default: false
          title: Include Inactive
          type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/WebhookResponse'
                title: Response List Webhooks Api V1 Webhooks Get
                type: array
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: List Webhooks
      tags:
      - webhook
    post:
      description: Create a new webhook
      operationId: create_webhook_api_v1_webhooks_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookCreate'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Create Webhook
      tags:
      - webhook
  /api/v1/webhooks/test:
    post:
      description: webhook test endpoint to verify setup
      operationId: test_webhook_provider_api_v1_webhooks_test_post
      requestBody:
        content:
          application/json:
            schema:
              title: Data
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                title: Response Test Webhook Provider Api V1 Webhooks Test Post
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Test Webhook Provider
      tags:
      - webhook
  /api/v1/webhooks/webhooks/{webhook_id}:
    delete:
      operationId: delete_webhook_public_api_v1_webhooks_webhooks__webhook_id__delete
      parameters:
      - in: path
        name: webhook_id
        required: true
        schema:
          format: uuid
          title: Webhook Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - OAuth2PasswordBearer: []
      summary: Delete Webhook Public
      tags:
      - webhook
  /api/v1/webhooks/{webhook_id}:
    get:
      description: Get a specific webhook
      operationId: get_webhook_api_v1_webhooks__webhook_id__get
      parameters:
      - in: path
        name: webhook_id
        required: true
        schema:
          format: uuid
          title: Webhook Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Webhook
      tags:
      - webhook
  /api/v1/webhooks/{webhook_id}/test:
    post:
      description: Send a test event to the webhook
      operationId: test_webhook_api_v1_webhooks__webhook_id__test_post
      parameters:
      - in: path
        name: webhook_id
        required: true
        schema:
          format: uuid
          title: Webhook Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookTestResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Test Webhook
      tags:
      - webhook
  /health:
    get:
      operationId: health_check_health_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Health Check
  /metrics:
    get:
      operationId: metrics_metrics_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Metrics
